{"ast":null,"code":"import { InjectionToken, Injectable, Inject, ErrorHandler, NgModule } from '@angular/core';\nimport { ActionsSubject, UPDATE, INIT, ReducerObservable, ScannedActionsSubject, INITIAL_STATE, StateObservable, ReducerManagerDispatcher } from '@ngrx/store';\nimport { EMPTY, Observable, of, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { share, filter, map, concatMap, timeout, debounceTime, catchError, take, takeUntil, switchMap, skip, observeOn, withLatestFrom, scan } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nclass StoreDevtoolsConfig {\n  constructor() {\n    this.maxAge = false;\n  }\n}\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/store-devtools Options');\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/store-devtools Initial Config');\nfunction noMonitor() {\n  return null;\n}\nconst DEFAULT_NAME = 'NgRx Store DevTools';\nfunction createConfig(optionsInput) {\n  const DEFAULT_OPTIONS = {\n    maxAge: false,\n    monitor: noMonitor,\n    actionSanitizer: undefined,\n    stateSanitizer: undefined,\n    name: DEFAULT_NAME,\n    serialize: false,\n    logOnly: false,\n    autoPause: false,\n    // Add all features explicitly. This prevent buggy behavior for\n    // options like \"lock\" which might otherwise not show up.\n    features: {\n      pause: true,\n      lock: true,\n      persist: true,\n      export: true,\n      import: 'custom',\n      jump: true,\n      skip: true,\n      reorder: true,\n      dispatch: true,\n      test: true // generate tests for the selected actions\n    }\n  };\n\n  const options = typeof optionsInput === 'function' ? optionsInput() : optionsInput;\n  const logOnly = options.logOnly ? {\n    pause: true,\n    export: true,\n    test: true\n  } : false;\n  const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n  const config = Object.assign({}, DEFAULT_OPTIONS, {\n    features\n  }, options);\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n  }\n  return config;\n}\nconst PERFORM_ACTION = 'PERFORM_ACTION';\nconst REFRESH = 'REFRESH';\nconst RESET = 'RESET';\nconst ROLLBACK = 'ROLLBACK';\nconst COMMIT = 'COMMIT';\nconst SWEEP = 'SWEEP';\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nconst IMPORT_STATE = 'IMPORT_STATE';\nconst LOCK_CHANGES = 'LOCK_CHANGES';\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\nclass PerformAction {\n  constructor(action, timestamp) {\n    this.action = action;\n    this.timestamp = timestamp;\n    this.type = PERFORM_ACTION;\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n  }\n}\nclass Refresh {\n  constructor() {\n    this.type = REFRESH;\n  }\n}\nclass Reset {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = RESET;\n  }\n}\nclass Rollback {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = ROLLBACK;\n  }\n}\nclass Commit {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = COMMIT;\n  }\n}\nclass Sweep {\n  constructor() {\n    this.type = SWEEP;\n  }\n}\nclass ToggleAction {\n  constructor(id) {\n    this.id = id;\n    this.type = TOGGLE_ACTION;\n  }\n}\nclass SetActionsActive {\n  constructor(start, end, active = true) {\n    this.start = start;\n    this.end = end;\n    this.active = active;\n    this.type = SET_ACTIONS_ACTIVE;\n  }\n}\nclass JumpToState {\n  constructor(index) {\n    this.index = index;\n    this.type = JUMP_TO_STATE;\n  }\n}\nclass JumpToAction {\n  constructor(actionId) {\n    this.actionId = actionId;\n    this.type = JUMP_TO_ACTION;\n  }\n}\nclass ImportState {\n  constructor(nextLiftedState) {\n    this.nextLiftedState = nextLiftedState;\n    this.type = IMPORT_STATE;\n  }\n}\nclass LockChanges {\n  constructor(status) {\n    this.status = status;\n    this.type = LOCK_CHANGES;\n  }\n}\nclass PauseRecording {\n  constructor(status) {\n    this.status = status;\n    this.type = PAUSE_RECORDING;\n  }\n}\nclass DevtoolsDispatcher extends ActionsSubject {}\nDevtoolsDispatcher.ɵfac = /*@__PURE__*/function () {\n  let ɵDevtoolsDispatcher_BaseFactory;\n  return function DevtoolsDispatcher_Factory(t) {\n    return (ɵDevtoolsDispatcher_BaseFactory || (ɵDevtoolsDispatcher_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DevtoolsDispatcher)))(t || DevtoolsDispatcher);\n  };\n}();\nDevtoolsDispatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: DevtoolsDispatcher,\n  factory: DevtoolsDispatcher.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsDispatcher, [{\n    type: Injectable\n  }], null, null);\n})();\nfunction difference(first, second) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n */\nfunction unliftState(liftedState) {\n  const {\n    computedStates,\n    currentStateIndex\n  } = liftedState;\n  // At start up NgRx dispatches init actions,\n  // When these init actions are being filtered out by the predicate or safe/block list options\n  // we don't have a complete computed states yet.\n  // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n  if (currentStateIndex >= computedStates.length) {\n    const {\n      state\n    } = computedStates[computedStates.length - 1];\n    return state;\n  }\n  const {\n    state\n  } = computedStates[currentStateIndex];\n  return state;\n}\nfunction unliftAction(liftedState) {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nfunction liftAction(action) {\n  return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n */\nfunction sanitizeActions(actionSanitizer, actions) {\n  return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n    const idx = Number(actionIdx);\n    sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n    return sanitizedActions;\n  }, {});\n}\n/**\n * Sanitizes given action with given function.\n */\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n  return Object.assign(Object.assign({}, action), {\n    action: actionSanitizer(action.action, actionIdx)\n  });\n}\n/**\n * Sanitizes given states with given function.\n */\nfunction sanitizeStates(stateSanitizer, states) {\n  return states.map((computedState, idx) => ({\n    state: sanitizeState(stateSanitizer, computedState.state, idx),\n    error: computedState.error\n  }));\n}\n/**\n * Sanitizes given state with given function.\n */\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n  return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n */\nfunction shouldFilterActions(config) {\n  return config.predicate || config.actionsSafelist || config.actionsBlocklist;\n}\n/**\n * Return a full filtered lifted state\n */\nfunction filterLiftedState(liftedState, predicate, safelist, blocklist) {\n  const filteredStagedActionIds = [];\n  const filteredActionsById = {};\n  const filteredComputedStates = [];\n  liftedState.stagedActionIds.forEach((id, idx) => {\n    const liftedAction = liftedState.actionsById[id];\n    if (!liftedAction) return;\n    if (idx && isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {\n      return;\n    }\n    filteredActionsById[id] = liftedAction;\n    filteredStagedActionIds.push(id);\n    filteredComputedStates.push(liftedState.computedStates[idx]);\n  });\n  return Object.assign(Object.assign({}, liftedState), {\n    stagedActionIds: filteredStagedActionIds,\n    actionsById: filteredActionsById,\n    computedStates: filteredComputedStates\n  });\n}\n/**\n * Return true is the action should be ignored\n */\nfunction isActionFiltered(state, action, predicate, safelist, blockedlist) {\n  const predicateMatch = predicate && !predicate(state, action.action);\n  const safelistMatch = safelist && !action.action.type.match(safelist.map(s => escapeRegExp(s)).join('|'));\n  const blocklistMatch = blockedlist && action.action.type.match(blockedlist.map(s => escapeRegExp(s)).join('|'));\n  return predicateMatch || safelistMatch || blocklistMatch;\n}\n/**\n * Return string with escaped RegExp special characters\n * https://stackoverflow.com/a/6969486/1337347\n */\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nconst ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION'\n};\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('@ngrx/store-devtools Redux Devtools Extension');\nclass DevtoolsExtension {\n  constructor(devtoolsExtension, config, dispatcher) {\n    this.config = config;\n    this.dispatcher = dispatcher;\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n  notify(action, state) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n    // Check to see if the action requires a full update of the liftedState.\n    // If it is a simple action generated by the user's app and the recording\n    // is not locked/paused, only send the action and the current state (fast).\n    //\n    // A full liftedState update (slow: serializes the entire liftedState) is\n    // only required when:\n    //   a) redux-devtools-extension fires the @@Init action (ignored by\n    //      @ngrx/store-devtools)\n    //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n    //      or @ngrx/store/update-reducers)\n    //   c) the state has been recomputed due to time-traveling\n    //   d) any action that is not a PerformAction to err on the side of\n    //      caution.\n    if (action.type === PERFORM_ACTION) {\n      if (state.isLocked || state.isPaused) {\n        return;\n      }\n      const currentState = unliftState(state);\n      if (shouldFilterActions(this.config) && isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {\n        return;\n      }\n      const sanitizedState = this.config.stateSanitizer ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex) : currentState;\n      const sanitizedAction = this.config.actionSanitizer ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId) : action;\n      this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n    } else {\n      // Requires full state update\n      const sanitizedLiftedState = Object.assign(Object.assign({}, state), {\n        stagedActionIds: state.stagedActionIds,\n        actionsById: this.config.actionSanitizer ? sanitizeActions(this.config.actionSanitizer, state.actionsById) : state.actionsById,\n        computedStates: this.config.stateSanitizer ? sanitizeStates(this.config.stateSanitizer, state.computedStates) : state.computedStates\n      });\n      this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n    }\n  }\n  createChangesObservable() {\n    if (!this.devtoolsExtension) {\n      return EMPTY;\n    }\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n      this.extensionConnection = connection;\n      connection.init();\n      connection.subscribe(change => subscriber.next(change));\n      return connection.unsubscribe;\n    });\n  }\n  createActionStreams() {\n    // Listens to all changes\n    const changes$ = this.createChangesObservable().pipe(share());\n    // Listen for the start action\n    const start$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.START));\n    // Listen for the stop action\n    const stop$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.STOP));\n    // Listen for lifted actions\n    const liftedActions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.DISPATCH), map(change => this.unwrapAction(change.payload)), concatMap(action => {\n      if (action.type === IMPORT_STATE) {\n        // State imports may happen in two situations:\n        // 1. Explicitly by user\n        // 2. User activated the \"persist state accross reloads\" option\n        //    and now the state is imported during reload.\n        // Because of option 2, we need to give possible\n        // lazy loaded reducers time to instantiate.\n        // As soon as there is no UPDATE action within 1 second,\n        // it is assumed that all reducers are loaded.\n        return this.dispatcher.pipe(filter(action => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n      } else {\n        return of(action);\n      }\n    }));\n    // Listen for unlifted actions\n    const actions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.ACTION), map(change => this.unwrapAction(change.payload)));\n    const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n    const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n    this.start$ = start$.pipe(takeUntil(stop$));\n    // Only take the action sources between the start/stop events\n    this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n    this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n  }\n  unwrapAction(action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\n  getExtensionConfig(config) {\n    var _a;\n    const extensionOptions = {\n      name: config.name,\n      features: config.features,\n      serialize: config.serialize,\n      autoPause: (_a = config.autoPause) !== null && _a !== void 0 ? _a : false\n      // The action/state sanitizers are not added to the config\n      // because sanitation is done in this class already.\n      // It is done before sending it to the devtools extension for consistency:\n      // - If we call extensionConnection.send(...),\n      //   the extension would call the sanitizers.\n      // - If we call devtoolsExtension.send(...) (aka full state update),\n      //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n    };\n\n    if (config.maxAge !== false /* support === 0 */) {\n      extensionOptions.maxAge = config.maxAge;\n    }\n    return extensionOptions;\n  }\n  sendToReduxDevtools(send) {\n    try {\n      send();\n    } catch (err) {\n      console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n    }\n  }\n}\nDevtoolsExtension.ɵfac = function DevtoolsExtension_Factory(t) {\n  return new (t || DevtoolsExtension)(ɵngcc0.ɵɵinject(REDUX_DEVTOOLS_EXTENSION), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG), ɵngcc0.ɵɵinject(DevtoolsDispatcher));\n};\nDevtoolsExtension.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: DevtoolsExtension,\n  factory: DevtoolsExtension.ɵfac\n});\n/** @nocollapse */\nDevtoolsExtension.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [REDUX_DEVTOOLS_EXTENSION]\n  }]\n}, {\n  type: StoreDevtoolsConfig,\n  decorators: [{\n    type: Inject,\n    args: [STORE_DEVTOOLS_CONFIG]\n  }]\n}, {\n  type: DevtoolsDispatcher\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsExtension, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REDUX_DEVTOOLS_EXTENSION]\n      }]\n    }, {\n      type: StoreDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [STORE_DEVTOOLS_CONFIG]\n      }]\n    }, {\n      type: DevtoolsDispatcher\n    }];\n  }, null);\n})();\nconst INIT_ACTION = {\n  type: INIT\n};\nconst RECOMPUTE = '@ngrx/store-devtools/recompute';\nconst RECOMPUTE_ACTION = {\n  type: RECOMPUTE\n};\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain'\n    };\n  }\n  let nextState = state;\n  let nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    errorHandler.handleError(err);\n  }\n  return {\n    state: nextState,\n    error: nextError\n  };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {\n    return computedStates;\n  }\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  // If the recording is paused, recompute all states up until the pause state,\n  // else recompute all states.\n  const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n  for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry = shouldSkip ? previousEntry : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n    nextComputedStates.push(entry);\n  }\n  // If the recording is paused, the last state will not be recomputed,\n  // because it's essentially not part of the state history.\n  if (isPaused) {\n    nextComputedStates.push(computedStates[computedStates.length - 1]);\n  }\n  return nextComputedStates;\n}\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: {\n      0: liftAction(INIT_ACTION)\n    },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n    isLocked: false,\n    isPaused: false\n  };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n */\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return reducer => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused\n    } = liftedState || initialLiftedState;\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n    function commitExcessActions(n) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n      skippedActionIds = skippedActionIds.filter(id => idsToDelete.indexOf(id) === -1);\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex = currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n    function commitChanges() {\n      // Consider the last committed state the new starting point.\n      // Squash any staged actions into a single committed state.\n      actionsById = {\n        0: liftAction(INIT_ACTION)\n      };\n      nextActionId = 1;\n      stagedActionIds = [0];\n      skippedActionIds = [];\n      committedState = computedStates[currentStateIndex].state;\n      currentStateIndex = 0;\n      computedStates = [];\n    }\n    // By default, aggressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let minInvalidatedStateIndex = 0;\n    switch (liftedAction.type) {\n      case LOCK_CHANGES:\n        {\n          isLocked = liftedAction.status;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case PAUSE_RECORDING:\n        {\n          isPaused = liftedAction.status;\n          if (isPaused) {\n            // Add a pause action to signal the devtools-user the recording is paused.\n            // The corresponding state will be overwritten on each update to always contain\n            // the latest state (see Actions.PERFORM_ACTION).\n            stagedActionIds = [...stagedActionIds, nextActionId];\n            actionsById[nextActionId] = new PerformAction({\n              type: '@ngrx/devtools/pause'\n            }, +Date.now());\n            nextActionId++;\n            minInvalidatedStateIndex = stagedActionIds.length - 1;\n            computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n            if (currentStateIndex === stagedActionIds.length - 2) {\n              currentStateIndex++;\n            }\n            minInvalidatedStateIndex = Infinity;\n          } else {\n            commitChanges();\n          }\n          break;\n        }\n      case RESET:\n        {\n          // Get back to the state the store was created with.\n          actionsById = {\n            0: liftAction(INIT_ACTION)\n          };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          committedState = initialCommittedState;\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case COMMIT:\n        {\n          commitChanges();\n          break;\n        }\n      case ROLLBACK:\n        {\n          // Forget about any staged actions.\n          // Start again from the last committed state.\n          actionsById = {\n            0: liftAction(INIT_ACTION)\n          };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case TOGGLE_ACTION:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          const {\n            id: actionId\n          } = liftedAction;\n          const index = skippedActionIds.indexOf(actionId);\n          if (index === -1) {\n            skippedActionIds = [actionId, ...skippedActionIds];\n          } else {\n            skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n          }\n          // Optimization: we know history before this action hasn't changed\n          minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n          break;\n        }\n      case SET_ACTIONS_ACTIVE:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          const {\n            start,\n            end,\n            active\n          } = liftedAction;\n          const actionIds = [];\n          for (let i = start; i < end; i++) actionIds.push(i);\n          if (active) {\n            skippedActionIds = difference(skippedActionIds, actionIds);\n          } else {\n            skippedActionIds = [...skippedActionIds, ...actionIds];\n          }\n          // Optimization: we know history before this action hasn't changed\n          minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n          break;\n        }\n      case JUMP_TO_STATE:\n        {\n          // Without recomputing anything, move the pointer that tell us\n          // which state is considered the current one. Useful for sliders.\n          currentStateIndex = liftedAction.index;\n          // Optimization: we know the history has not changed.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case JUMP_TO_ACTION:\n        {\n          // Jumps to a corresponding state to a specific action.\n          // Useful when filtering actions.\n          const index = stagedActionIds.indexOf(liftedAction.actionId);\n          if (index !== -1) currentStateIndex = index;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case SWEEP:\n        {\n          // Forget any actions that are currently being skipped.\n          stagedActionIds = difference(stagedActionIds, skippedActionIds);\n          skippedActionIds = [];\n          currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n          break;\n        }\n      case PERFORM_ACTION:\n        {\n          // Ignore action and return state as is if recording is locked\n          if (isLocked) {\n            return liftedState || initialLiftedState;\n          }\n          if (isPaused || liftedState && isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsSafelist, options.actionsBlocklist)) {\n            // If recording is paused or if the action should be ignored, overwrite the last state\n            // (corresponds to the pause action) and keep everything else as is.\n            // This way, the app gets the new current state while the devtools\n            // do not record another action.\n            const lastState = computedStates[computedStates.length - 1];\n            computedStates = [...computedStates.slice(0, -1), computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler)];\n            minInvalidatedStateIndex = Infinity;\n            break;\n          }\n          // Auto-commit as new actions come in.\n          if (options.maxAge && stagedActionIds.length === options.maxAge) {\n            commitExcessActions(1);\n          }\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n          const actionId = nextActionId++;\n          // Mutation! This is the hottest path, and we optimize on purpose.\n          // It is safe because we set a new key in a cache dictionary.\n          actionsById[actionId] = liftedAction;\n          stagedActionIds = [...stagedActionIds, actionId];\n          // Optimization: we know that only the new action needs computing.\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n          break;\n        }\n      case IMPORT_STATE:\n        {\n          // Completely replace everything.\n          ({\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused\n          } = liftedAction.nextLiftedState);\n          break;\n        }\n      case INIT:\n        {\n          // Always recompute states on hot reload and init.\n          minInvalidatedStateIndex = 0;\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n          break;\n        }\n      case UPDATE:\n        {\n          const stateHasErrors = computedStates.filter(state => state.error).length > 0;\n          if (stateHasErrors) {\n            // Recompute all states\n            minInvalidatedStateIndex = 0;\n            if (options.maxAge && stagedActionIds.length > options.maxAge) {\n              // States must be recomputed before committing excess.\n              computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n              commitExcessActions(stagedActionIds.length - options.maxAge);\n              // Avoid double computation.\n              minInvalidatedStateIndex = Infinity;\n            }\n          } else {\n            // If not paused/locked, add a new action to signal devtools-user\n            // that there was a reducer update.\n            if (!isPaused && !isLocked) {\n              if (currentStateIndex === stagedActionIds.length - 1) {\n                currentStateIndex++;\n              }\n              // Add a new action to only recompute state\n              const actionId = nextActionId++;\n              actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n              stagedActionIds = [...stagedActionIds, actionId];\n              minInvalidatedStateIndex = stagedActionIds.length - 1;\n              computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n            }\n            // Recompute state history with latest reducer and update action\n            computedStates = computedStates.map(cmp => Object.assign(Object.assign({}, cmp), {\n              state: reducer(cmp.state, RECOMPUTE_ACTION)\n            }));\n            currentStateIndex = stagedActionIds.length - 1;\n            if (options.maxAge && stagedActionIds.length > options.maxAge) {\n              commitExcessActions(stagedActionIds.length - options.maxAge);\n            }\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n          break;\n        }\n      default:\n        {\n          // If the action is not recognized, it's a monitor action.\n          // Optimization: a monitor action can't change history.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n    }\n    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n    monitorState = monitorReducer(monitorState, liftedAction);\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused\n    };\n  };\n}\nclass StoreDevtools {\n  constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n    const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n    const liftedReducer$ = reducers$.pipe(map(liftReducer));\n    const liftedStateSubject = new ReplaySubject(1);\n    const liftedStateSubscription = liftedAction$.pipe(withLatestFrom(liftedReducer$), scan(({\n      state: liftedState\n    }, [action, reducer]) => {\n      let reducedLiftedState = reducer(liftedState, action);\n      // On full state update\n      // If we have actions filters, we must filter completely our lifted state to be sync with the extension\n      if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n        reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);\n      }\n      // Extension should be sent the sanitized lifted state\n      extension.notify(action, reducedLiftedState);\n      return {\n        state: reducedLiftedState,\n        action\n      };\n    }, {\n      state: liftedInitialState,\n      action: null\n    })).subscribe(({\n      state,\n      action\n    }) => {\n      liftedStateSubject.next(state);\n      if (action.type === PERFORM_ACTION) {\n        const unliftedAction = action.action;\n        scannedActions.next(unliftedAction);\n      }\n    });\n    const extensionStartSubscription = extension.start$.subscribe(() => {\n      this.refresh();\n    });\n    const liftedState$ = liftedStateSubject.asObservable();\n    const state$ = liftedState$.pipe(map(unliftState));\n    this.extensionStartSubscription = extensionStartSubscription;\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n  dispatch(action) {\n    this.dispatcher.next(action);\n  }\n  next(action) {\n    this.dispatcher.next(action);\n  }\n  error(error) {}\n  complete() {}\n  performAction(action) {\n    this.dispatch(new PerformAction(action, +Date.now()));\n  }\n  refresh() {\n    this.dispatch(new Refresh());\n  }\n  reset() {\n    this.dispatch(new Reset(+Date.now()));\n  }\n  rollback() {\n    this.dispatch(new Rollback(+Date.now()));\n  }\n  commit() {\n    this.dispatch(new Commit(+Date.now()));\n  }\n  sweep() {\n    this.dispatch(new Sweep());\n  }\n  toggleAction(id) {\n    this.dispatch(new ToggleAction(id));\n  }\n  jumpToAction(actionId) {\n    this.dispatch(new JumpToAction(actionId));\n  }\n  jumpToState(index) {\n    this.dispatch(new JumpToState(index));\n  }\n  importState(nextLiftedState) {\n    this.dispatch(new ImportState(nextLiftedState));\n  }\n  lockChanges(status) {\n    this.dispatch(new LockChanges(status));\n  }\n  pauseRecording(status) {\n    this.dispatch(new PauseRecording(status));\n  }\n}\nStoreDevtools.ɵfac = function StoreDevtools_Factory(t) {\n  return new (t || StoreDevtools)(ɵngcc0.ɵɵinject(DevtoolsDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerObservable), ɵngcc0.ɵɵinject(DevtoolsExtension), ɵngcc0.ɵɵinject(ɵngcc1.ScannedActionsSubject), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG));\n};\nStoreDevtools.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: StoreDevtools,\n  factory: StoreDevtools.ɵfac\n});\n/** @nocollapse */\nStoreDevtools.ctorParameters = () => [{\n  type: DevtoolsDispatcher\n}, {\n  type: ActionsSubject\n}, {\n  type: ReducerObservable\n}, {\n  type: DevtoolsExtension\n}, {\n  type: ScannedActionsSubject\n}, {\n  type: ErrorHandler\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [INITIAL_STATE]\n  }]\n}, {\n  type: StoreDevtoolsConfig,\n  decorators: [{\n    type: Inject,\n    args: [STORE_DEVTOOLS_CONFIG]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtools, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DevtoolsDispatcher\n    }, {\n      type: ɵngcc1.ActionsSubject\n    }, {\n      type: ɵngcc1.ReducerObservable\n    }, {\n      type: DevtoolsExtension\n    }, {\n      type: ɵngcc1.ScannedActionsSubject\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }, {\n      type: StoreDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [STORE_DEVTOOLS_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('@ngrx/store-devtools Is Devtools Extension or Monitor Present');\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\nfunction createReduxDevtoolsExtension() {\n  const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n  if (typeof window === 'object' && typeof window[extensionKey] !== 'undefined') {\n    return window[extensionKey];\n  } else {\n    return null;\n  }\n}\nfunction createStateObservable(devtools) {\n  return devtools.state;\n}\nclass StoreDevtoolsModule {\n  static instrument(options = {}) {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [DevtoolsExtension, DevtoolsDispatcher, StoreDevtools, {\n        provide: INITIAL_OPTIONS,\n        useValue: options\n      }, {\n        provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n        deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n        useFactory: createIsExtensionOrMonitorPresent\n      }, {\n        provide: REDUX_DEVTOOLS_EXTENSION,\n        useFactory: createReduxDevtoolsExtension\n      }, {\n        provide: STORE_DEVTOOLS_CONFIG,\n        deps: [INITIAL_OPTIONS],\n        useFactory: createConfig\n      }, {\n        provide: StateObservable,\n        deps: [StoreDevtools],\n        useFactory: createStateObservable\n      }, {\n        provide: ReducerManagerDispatcher,\n        useExisting: DevtoolsDispatcher\n      }]\n    };\n  }\n}\nStoreDevtoolsModule.ɵfac = function StoreDevtoolsModule_Factory(t) {\n  return new (t || StoreDevtoolsModule)();\n};\nStoreDevtoolsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: StoreDevtoolsModule\n});\nStoreDevtoolsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtoolsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_OPTIONS, RECOMPUTE, StoreDevtools, StoreDevtoolsConfig, StoreDevtoolsModule, IS_EXTENSION_OR_MONITOR_PRESENT as ɵa, createIsExtensionOrMonitorPresent as ɵb, createReduxDevtoolsExtension as ɵc, createStateObservable as ɵd, STORE_DEVTOOLS_CONFIG as ɵe, noMonitor as ɵf, createConfig as ɵg, REDUX_DEVTOOLS_EXTENSION as ɵh, DevtoolsExtension as ɵi, DevtoolsDispatcher as ɵj };","map":{"version":3,"names":["InjectionToken","Injectable","Inject","ErrorHandler","NgModule","ActionsSubject","UPDATE","INIT","ReducerObservable","ScannedActionsSubject","INITIAL_STATE","StateObservable","ReducerManagerDispatcher","EMPTY","Observable","of","merge","queueScheduler","ReplaySubject","share","filter","map","concatMap","timeout","debounceTime","catchError","take","takeUntil","switchMap","skip","observeOn","withLatestFrom","scan","ɵngcc0","ɵngcc1","StoreDevtoolsConfig","constructor","maxAge","STORE_DEVTOOLS_CONFIG","INITIAL_OPTIONS","noMonitor","DEFAULT_NAME","createConfig","optionsInput","DEFAULT_OPTIONS","monitor","actionSanitizer","undefined","stateSanitizer","name","serialize","logOnly","autoPause","features","pause","lock","persist","export","import","jump","reorder","dispatch","test","options","config","Object","assign","Error","PERFORM_ACTION","REFRESH","RESET","ROLLBACK","COMMIT","SWEEP","TOGGLE_ACTION","SET_ACTIONS_ACTIVE","JUMP_TO_STATE","JUMP_TO_ACTION","IMPORT_STATE","LOCK_CHANGES","PAUSE_RECORDING","PerformAction","action","timestamp","type","Refresh","Reset","Rollback","Commit","Sweep","ToggleAction","id","SetActionsActive","start","end","active","JumpToState","index","JumpToAction","actionId","ImportState","nextLiftedState","LockChanges","status","PauseRecording","DevtoolsDispatcher","ɵfac","ɵDevtoolsDispatcher_BaseFactory","DevtoolsDispatcher_Factory","t","ɵɵgetInheritedFactory","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","difference","first","second","item","indexOf","unliftState","liftedState","computedStates","currentStateIndex","length","state","unliftAction","actionsById","nextActionId","liftAction","Date","now","sanitizeActions","actions","keys","reduce","sanitizedActions","actionIdx","idx","Number","sanitizeAction","sanitizeStates","states","computedState","sanitizeState","error","stateIdx","shouldFilterActions","predicate","actionsSafelist","actionsBlocklist","filterLiftedState","safelist","blocklist","filteredStagedActionIds","filteredActionsById","filteredComputedStates","stagedActionIds","forEach","liftedAction","isActionFiltered","push","blockedlist","predicateMatch","safelistMatch","match","s","escapeRegExp","join","blocklistMatch","replace","ExtensionActionTypes","START","DISPATCH","STOP","ACTION","REDUX_DEVTOOLS_EXTENSION","DevtoolsExtension","devtoolsExtension","dispatcher","createActionStreams","notify","isLocked","isPaused","currentState","sanitizedState","sanitizedAction","sendToReduxDevtools","extensionConnection","send","sanitizedLiftedState","getExtensionConfig","createChangesObservable","subscriber","connection","connect","init","subscribe","change","next","unsubscribe","changes$","pipe","start$","stop$","liftedActions$","unwrapAction","payload","actions$","actionsUntilStop$","liftedUntilStop$","eval","_a","extensionOptions","err","console","warn","DevtoolsExtension_Factory","ɵɵinject","ctorParameters","decorators","args","INIT_ACTION","RECOMPUTE","RECOMPUTE_ACTION","computeNextEntry","reducer","errorHandler","nextState","nextError","toString","handleError","recomputeStates","minInvalidatedStateIndex","committedState","skippedActionIds","nextComputedStates","slice","lastIncludedActionId","i","previousEntry","previousState","previousError","shouldSkip","entry","liftInitialState","initialCommittedState","monitorReducer","monitorState","liftReducerWith","initialLiftedState","create","commitExcessActions","n","excess","idsToDelete","commitChanges","Infinity","concat","actionIds","Math","min","lastState","stateHasErrors","cmp","StoreDevtools","reducers$","extension","scannedActions","initialState","liftedInitialState","liftReducer","liftedAction$","asObservable","liftedReducer$","liftedStateSubject","liftedStateSubscription","reducedLiftedState","unliftedAction","extensionStartSubscription","refresh","liftedState$","state$","stateSubscription","complete","performAction","reset","rollback","commit","sweep","toggleAction","jumpToAction","jumpToState","importState","lockChanges","pauseRecording","StoreDevtools_Factory","IS_EXTENSION_OR_MONITOR_PRESENT","createIsExtensionOrMonitorPresent","Boolean","createReduxDevtoolsExtension","extensionKey","window","createStateObservable","devtools","StoreDevtoolsModule","instrument","ngModule","providers","provide","useValue","deps","useFactory","useExisting","StoreDevtoolsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ɵa","ɵb","ɵc","ɵd","ɵe","ɵf","ɵg","ɵh","ɵi","ɵj"],"sources":["C:/Users/Vongai/Vongai Code/Microsoft courses/my-static-web-app-and-api/angular-app/node_modules/@ngrx/store-devtools/__ivy_ngcc__/fesm2015/ngrx-store-devtools.js"],"sourcesContent":["import { InjectionToken, Injectable, Inject, ErrorHandler, NgModule } from '@angular/core';\nimport { ActionsSubject, UPDATE, INIT, ReducerObservable, ScannedActionsSubject, INITIAL_STATE, StateObservable, ReducerManagerDispatcher } from '@ngrx/store';\nimport { EMPTY, Observable, of, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { share, filter, map, concatMap, timeout, debounceTime, catchError, take, takeUntil, switchMap, skip, observeOn, withLatestFrom, scan } from 'rxjs/operators';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngrx/store';\nclass StoreDevtoolsConfig {\n    constructor() {\n        this.maxAge = false;\n    }\n}\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/store-devtools Options');\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/store-devtools Initial Config');\nfunction noMonitor() {\n    return null;\n}\nconst DEFAULT_NAME = 'NgRx Store DevTools';\nfunction createConfig(optionsInput) {\n    const DEFAULT_OPTIONS = {\n        maxAge: false,\n        monitor: noMonitor,\n        actionSanitizer: undefined,\n        stateSanitizer: undefined,\n        name: DEFAULT_NAME,\n        serialize: false,\n        logOnly: false,\n        autoPause: false,\n        // Add all features explicitly. This prevent buggy behavior for\n        // options like \"lock\" which might otherwise not show up.\n        features: {\n            pause: true,\n            lock: true,\n            persist: true,\n            export: true,\n            import: 'custom',\n            jump: true,\n            skip: true,\n            reorder: true,\n            dispatch: true,\n            test: true, // generate tests for the selected actions\n        },\n    };\n    const options = typeof optionsInput === 'function' ? optionsInput() : optionsInput;\n    const logOnly = options.logOnly\n        ? { pause: true, export: true, test: true }\n        : false;\n    const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n    const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n    if (config.maxAge && config.maxAge < 2) {\n        throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n    }\n    return config;\n}\n\nconst PERFORM_ACTION = 'PERFORM_ACTION';\nconst REFRESH = 'REFRESH';\nconst RESET = 'RESET';\nconst ROLLBACK = 'ROLLBACK';\nconst COMMIT = 'COMMIT';\nconst SWEEP = 'SWEEP';\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nconst IMPORT_STATE = 'IMPORT_STATE';\nconst LOCK_CHANGES = 'LOCK_CHANGES';\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\nclass PerformAction {\n    constructor(action, timestamp) {\n        this.action = action;\n        this.timestamp = timestamp;\n        this.type = PERFORM_ACTION;\n        if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' +\n                'Have you misspelled a constant?');\n        }\n    }\n}\nclass Refresh {\n    constructor() {\n        this.type = REFRESH;\n    }\n}\nclass Reset {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = RESET;\n    }\n}\nclass Rollback {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = ROLLBACK;\n    }\n}\nclass Commit {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = COMMIT;\n    }\n}\nclass Sweep {\n    constructor() {\n        this.type = SWEEP;\n    }\n}\nclass ToggleAction {\n    constructor(id) {\n        this.id = id;\n        this.type = TOGGLE_ACTION;\n    }\n}\nclass SetActionsActive {\n    constructor(start, end, active = true) {\n        this.start = start;\n        this.end = end;\n        this.active = active;\n        this.type = SET_ACTIONS_ACTIVE;\n    }\n}\nclass JumpToState {\n    constructor(index) {\n        this.index = index;\n        this.type = JUMP_TO_STATE;\n    }\n}\nclass JumpToAction {\n    constructor(actionId) {\n        this.actionId = actionId;\n        this.type = JUMP_TO_ACTION;\n    }\n}\nclass ImportState {\n    constructor(nextLiftedState) {\n        this.nextLiftedState = nextLiftedState;\n        this.type = IMPORT_STATE;\n    }\n}\nclass LockChanges {\n    constructor(status) {\n        this.status = status;\n        this.type = LOCK_CHANGES;\n    }\n}\nclass PauseRecording {\n    constructor(status) {\n        this.status = status;\n        this.type = PAUSE_RECORDING;\n    }\n}\n\nclass DevtoolsDispatcher extends ActionsSubject {\n}\nDevtoolsDispatcher.ɵfac = /*@__PURE__*/ function () { let ɵDevtoolsDispatcher_BaseFactory; return function DevtoolsDispatcher_Factory(t) { return (ɵDevtoolsDispatcher_BaseFactory || (ɵDevtoolsDispatcher_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DevtoolsDispatcher)))(t || DevtoolsDispatcher); }; }();\nDevtoolsDispatcher.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DevtoolsDispatcher, factory: DevtoolsDispatcher.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsDispatcher, [{\n        type: Injectable\n    }], null, null); })();\n\nfunction difference(first, second) {\n    return first.filter((item) => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n */\nfunction unliftState(liftedState) {\n    const { computedStates, currentStateIndex } = liftedState;\n    // At start up NgRx dispatches init actions,\n    // When these init actions are being filtered out by the predicate or safe/block list options\n    // we don't have a complete computed states yet.\n    // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n    if (currentStateIndex >= computedStates.length) {\n        const { state } = computedStates[computedStates.length - 1];\n        return state;\n    }\n    const { state } = computedStates[currentStateIndex];\n    return state;\n}\nfunction unliftAction(liftedState) {\n    return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nfunction liftAction(action) {\n    return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n */\nfunction sanitizeActions(actionSanitizer, actions) {\n    return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n        const idx = Number(actionIdx);\n        sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n        return sanitizedActions;\n    }, {});\n}\n/**\n * Sanitizes given action with given function.\n */\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n    return Object.assign(Object.assign({}, action), { action: actionSanitizer(action.action, actionIdx) });\n}\n/**\n * Sanitizes given states with given function.\n */\nfunction sanitizeStates(stateSanitizer, states) {\n    return states.map((computedState, idx) => ({\n        state: sanitizeState(stateSanitizer, computedState.state, idx),\n        error: computedState.error,\n    }));\n}\n/**\n * Sanitizes given state with given function.\n */\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n    return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n */\nfunction shouldFilterActions(config) {\n    return config.predicate || config.actionsSafelist || config.actionsBlocklist;\n}\n/**\n * Return a full filtered lifted state\n */\nfunction filterLiftedState(liftedState, predicate, safelist, blocklist) {\n    const filteredStagedActionIds = [];\n    const filteredActionsById = {};\n    const filteredComputedStates = [];\n    liftedState.stagedActionIds.forEach((id, idx) => {\n        const liftedAction = liftedState.actionsById[id];\n        if (!liftedAction)\n            return;\n        if (idx &&\n            isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {\n            return;\n        }\n        filteredActionsById[id] = liftedAction;\n        filteredStagedActionIds.push(id);\n        filteredComputedStates.push(liftedState.computedStates[idx]);\n    });\n    return Object.assign(Object.assign({}, liftedState), { stagedActionIds: filteredStagedActionIds, actionsById: filteredActionsById, computedStates: filteredComputedStates });\n}\n/**\n * Return true is the action should be ignored\n */\nfunction isActionFiltered(state, action, predicate, safelist, blockedlist) {\n    const predicateMatch = predicate && !predicate(state, action.action);\n    const safelistMatch = safelist &&\n        !action.action.type.match(safelist.map((s) => escapeRegExp(s)).join('|'));\n    const blocklistMatch = blockedlist &&\n        action.action.type.match(blockedlist.map((s) => escapeRegExp(s)).join('|'));\n    return predicateMatch || safelistMatch || blocklistMatch;\n}\n/**\n * Return string with escaped RegExp special characters\n * https://stackoverflow.com/a/6969486/1337347\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nconst ExtensionActionTypes = {\n    START: 'START',\n    DISPATCH: 'DISPATCH',\n    STOP: 'STOP',\n    ACTION: 'ACTION',\n};\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('@ngrx/store-devtools Redux Devtools Extension');\nclass DevtoolsExtension {\n    constructor(devtoolsExtension, config, dispatcher) {\n        this.config = config;\n        this.dispatcher = dispatcher;\n        this.devtoolsExtension = devtoolsExtension;\n        this.createActionStreams();\n    }\n    notify(action, state) {\n        if (!this.devtoolsExtension) {\n            return;\n        }\n        // Check to see if the action requires a full update of the liftedState.\n        // If it is a simple action generated by the user's app and the recording\n        // is not locked/paused, only send the action and the current state (fast).\n        //\n        // A full liftedState update (slow: serializes the entire liftedState) is\n        // only required when:\n        //   a) redux-devtools-extension fires the @@Init action (ignored by\n        //      @ngrx/store-devtools)\n        //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n        //      or @ngrx/store/update-reducers)\n        //   c) the state has been recomputed due to time-traveling\n        //   d) any action that is not a PerformAction to err on the side of\n        //      caution.\n        if (action.type === PERFORM_ACTION) {\n            if (state.isLocked || state.isPaused) {\n                return;\n            }\n            const currentState = unliftState(state);\n            if (shouldFilterActions(this.config) &&\n                isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {\n                return;\n            }\n            const sanitizedState = this.config.stateSanitizer\n                ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex)\n                : currentState;\n            const sanitizedAction = this.config.actionSanitizer\n                ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId)\n                : action;\n            this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n        }\n        else {\n            // Requires full state update\n            const sanitizedLiftedState = Object.assign(Object.assign({}, state), { stagedActionIds: state.stagedActionIds, actionsById: this.config.actionSanitizer\n                    ? sanitizeActions(this.config.actionSanitizer, state.actionsById)\n                    : state.actionsById, computedStates: this.config.stateSanitizer\n                    ? sanitizeStates(this.config.stateSanitizer, state.computedStates)\n                    : state.computedStates });\n            this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n        }\n    }\n    createChangesObservable() {\n        if (!this.devtoolsExtension) {\n            return EMPTY;\n        }\n        return new Observable((subscriber) => {\n            const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n            this.extensionConnection = connection;\n            connection.init();\n            connection.subscribe((change) => subscriber.next(change));\n            return connection.unsubscribe;\n        });\n    }\n    createActionStreams() {\n        // Listens to all changes\n        const changes$ = this.createChangesObservable().pipe(share());\n        // Listen for the start action\n        const start$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.START));\n        // Listen for the stop action\n        const stop$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.STOP));\n        // Listen for lifted actions\n        const liftedActions$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.DISPATCH), map((change) => this.unwrapAction(change.payload)), concatMap((action) => {\n            if (action.type === IMPORT_STATE) {\n                // State imports may happen in two situations:\n                // 1. Explicitly by user\n                // 2. User activated the \"persist state accross reloads\" option\n                //    and now the state is imported during reload.\n                // Because of option 2, we need to give possible\n                // lazy loaded reducers time to instantiate.\n                // As soon as there is no UPDATE action within 1 second,\n                // it is assumed that all reducers are loaded.\n                return this.dispatcher.pipe(filter((action) => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n            }\n            else {\n                return of(action);\n            }\n        }));\n        // Listen for unlifted actions\n        const actions$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.ACTION), map((change) => this.unwrapAction(change.payload)));\n        const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n        const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n        this.start$ = start$.pipe(takeUntil(stop$));\n        // Only take the action sources between the start/stop events\n        this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n        this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n    }\n    unwrapAction(action) {\n        return typeof action === 'string' ? eval(`(${action})`) : action;\n    }\n    getExtensionConfig(config) {\n        var _a;\n        const extensionOptions = {\n            name: config.name,\n            features: config.features,\n            serialize: config.serialize,\n            autoPause: (_a = config.autoPause) !== null && _a !== void 0 ? _a : false,\n            // The action/state sanitizers are not added to the config\n            // because sanitation is done in this class already.\n            // It is done before sending it to the devtools extension for consistency:\n            // - If we call extensionConnection.send(...),\n            //   the extension would call the sanitizers.\n            // - If we call devtoolsExtension.send(...) (aka full state update),\n            //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n        };\n        if (config.maxAge !== false /* support === 0 */) {\n            extensionOptions.maxAge = config.maxAge;\n        }\n        return extensionOptions;\n    }\n    sendToReduxDevtools(send) {\n        try {\n            send();\n        }\n        catch (err) {\n            console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n        }\n    }\n}\nDevtoolsExtension.ɵfac = function DevtoolsExtension_Factory(t) { return new (t || DevtoolsExtension)(ɵngcc0.ɵɵinject(REDUX_DEVTOOLS_EXTENSION), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG), ɵngcc0.ɵɵinject(DevtoolsDispatcher)); };\nDevtoolsExtension.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: DevtoolsExtension, factory: DevtoolsExtension.ɵfac });\n/** @nocollapse */\nDevtoolsExtension.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [REDUX_DEVTOOLS_EXTENSION,] }] },\n    { type: StoreDevtoolsConfig, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG,] }] },\n    { type: DevtoolsDispatcher }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DevtoolsExtension, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [REDUX_DEVTOOLS_EXTENSION]\n            }] }, { type: StoreDevtoolsConfig, decorators: [{\n                type: Inject,\n                args: [STORE_DEVTOOLS_CONFIG]\n            }] }, { type: DevtoolsDispatcher }]; }, null); })();\n\nconst INIT_ACTION = { type: INIT };\nconst RECOMPUTE = '@ngrx/store-devtools/recompute';\nconst RECOMPUTE_ACTION = { type: RECOMPUTE };\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n    if (error) {\n        return {\n            state,\n            error: 'Interrupted by an error up the chain',\n        };\n    }\n    let nextState = state;\n    let nextError;\n    try {\n        nextState = reducer(state, action);\n    }\n    catch (err) {\n        nextError = err.toString();\n        errorHandler.handleError(err);\n    }\n    return {\n        state: nextState,\n        error: nextError,\n    };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n    // Optimization: exit early and return the same reference\n    // if we know nothing could have changed.\n    if (minInvalidatedStateIndex >= computedStates.length &&\n        computedStates.length === stagedActionIds.length) {\n        return computedStates;\n    }\n    const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n    // If the recording is paused, recompute all states up until the pause state,\n    // else recompute all states.\n    const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n    for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n        const actionId = stagedActionIds[i];\n        const action = actionsById[actionId].action;\n        const previousEntry = nextComputedStates[i - 1];\n        const previousState = previousEntry ? previousEntry.state : committedState;\n        const previousError = previousEntry ? previousEntry.error : undefined;\n        const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n        const entry = shouldSkip\n            ? previousEntry\n            : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n        nextComputedStates.push(entry);\n    }\n    // If the recording is paused, the last state will not be recomputed,\n    // because it's essentially not part of the state history.\n    if (isPaused) {\n        nextComputedStates.push(computedStates[computedStates.length - 1]);\n    }\n    return nextComputedStates;\n}\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n    return {\n        monitorState: monitorReducer(undefined, {}),\n        nextActionId: 1,\n        actionsById: { 0: liftAction(INIT_ACTION) },\n        stagedActionIds: [0],\n        skippedActionIds: [],\n        committedState: initialCommittedState,\n        currentStateIndex: 0,\n        computedStates: [],\n        isLocked: false,\n        isPaused: false,\n    };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n */\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n    /**\n     * Manages how the history actions modify the history state.\n     */\n    return (reducer) => (liftedState, liftedAction) => {\n        let { monitorState, actionsById, nextActionId, stagedActionIds, skippedActionIds, committedState, currentStateIndex, computedStates, isLocked, isPaused, } = liftedState || initialLiftedState;\n        if (!liftedState) {\n            // Prevent mutating initialLiftedState\n            actionsById = Object.create(actionsById);\n        }\n        function commitExcessActions(n) {\n            // Auto-commits n-number of excess actions.\n            let excess = n;\n            let idsToDelete = stagedActionIds.slice(1, excess + 1);\n            for (let i = 0; i < idsToDelete.length; i++) {\n                if (computedStates[i + 1].error) {\n                    // Stop if error is found. Commit actions up to error.\n                    excess = i;\n                    idsToDelete = stagedActionIds.slice(1, excess + 1);\n                    break;\n                }\n                else {\n                    delete actionsById[idsToDelete[i]];\n                }\n            }\n            skippedActionIds = skippedActionIds.filter((id) => idsToDelete.indexOf(id) === -1);\n            stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n            committedState = computedStates[excess].state;\n            computedStates = computedStates.slice(excess);\n            currentStateIndex =\n                currentStateIndex > excess ? currentStateIndex - excess : 0;\n        }\n        function commitChanges() {\n            // Consider the last committed state the new starting point.\n            // Squash any staged actions into a single committed state.\n            actionsById = { 0: liftAction(INIT_ACTION) };\n            nextActionId = 1;\n            stagedActionIds = [0];\n            skippedActionIds = [];\n            committedState = computedStates[currentStateIndex].state;\n            currentStateIndex = 0;\n            computedStates = [];\n        }\n        // By default, aggressively recompute every state whatever happens.\n        // This has O(n) performance, so we'll override this to a sensible\n        // value whenever we feel like we don't have to recompute the states.\n        let minInvalidatedStateIndex = 0;\n        switch (liftedAction.type) {\n            case LOCK_CHANGES: {\n                isLocked = liftedAction.status;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case PAUSE_RECORDING: {\n                isPaused = liftedAction.status;\n                if (isPaused) {\n                    // Add a pause action to signal the devtools-user the recording is paused.\n                    // The corresponding state will be overwritten on each update to always contain\n                    // the latest state (see Actions.PERFORM_ACTION).\n                    stagedActionIds = [...stagedActionIds, nextActionId];\n                    actionsById[nextActionId] = new PerformAction({\n                        type: '@ngrx/devtools/pause',\n                    }, +Date.now());\n                    nextActionId++;\n                    minInvalidatedStateIndex = stagedActionIds.length - 1;\n                    computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n                    if (currentStateIndex === stagedActionIds.length - 2) {\n                        currentStateIndex++;\n                    }\n                    minInvalidatedStateIndex = Infinity;\n                }\n                else {\n                    commitChanges();\n                }\n                break;\n            }\n            case RESET: {\n                // Get back to the state the store was created with.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                committedState = initialCommittedState;\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case COMMIT: {\n                commitChanges();\n                break;\n            }\n            case ROLLBACK: {\n                // Forget about any staged actions.\n                // Start again from the last committed state.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case TOGGLE_ACTION: {\n                // Toggle whether an action with given ID is skipped.\n                // Being skipped means it is a no-op during the computation.\n                const { id: actionId } = liftedAction;\n                const index = skippedActionIds.indexOf(actionId);\n                if (index === -1) {\n                    skippedActionIds = [actionId, ...skippedActionIds];\n                }\n                else {\n                    skippedActionIds = skippedActionIds.filter((id) => id !== actionId);\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n                break;\n            }\n            case SET_ACTIONS_ACTIVE: {\n                // Toggle whether an action with given ID is skipped.\n                // Being skipped means it is a no-op during the computation.\n                const { start, end, active } = liftedAction;\n                const actionIds = [];\n                for (let i = start; i < end; i++)\n                    actionIds.push(i);\n                if (active) {\n                    skippedActionIds = difference(skippedActionIds, actionIds);\n                }\n                else {\n                    skippedActionIds = [...skippedActionIds, ...actionIds];\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n                break;\n            }\n            case JUMP_TO_STATE: {\n                // Without recomputing anything, move the pointer that tell us\n                // which state is considered the current one. Useful for sliders.\n                currentStateIndex = liftedAction.index;\n                // Optimization: we know the history has not changed.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case JUMP_TO_ACTION: {\n                // Jumps to a corresponding state to a specific action.\n                // Useful when filtering actions.\n                const index = stagedActionIds.indexOf(liftedAction.actionId);\n                if (index !== -1)\n                    currentStateIndex = index;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case SWEEP: {\n                // Forget any actions that are currently being skipped.\n                stagedActionIds = difference(stagedActionIds, skippedActionIds);\n                skippedActionIds = [];\n                currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n                break;\n            }\n            case PERFORM_ACTION: {\n                // Ignore action and return state as is if recording is locked\n                if (isLocked) {\n                    return liftedState || initialLiftedState;\n                }\n                if (isPaused ||\n                    (liftedState &&\n                        isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsSafelist, options.actionsBlocklist))) {\n                    // If recording is paused or if the action should be ignored, overwrite the last state\n                    // (corresponds to the pause action) and keep everything else as is.\n                    // This way, the app gets the new current state while the devtools\n                    // do not record another action.\n                    const lastState = computedStates[computedStates.length - 1];\n                    computedStates = [\n                        ...computedStates.slice(0, -1),\n                        computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler),\n                    ];\n                    minInvalidatedStateIndex = Infinity;\n                    break;\n                }\n                // Auto-commit as new actions come in.\n                if (options.maxAge && stagedActionIds.length === options.maxAge) {\n                    commitExcessActions(1);\n                }\n                if (currentStateIndex === stagedActionIds.length - 1) {\n                    currentStateIndex++;\n                }\n                const actionId = nextActionId++;\n                // Mutation! This is the hottest path, and we optimize on purpose.\n                // It is safe because we set a new key in a cache dictionary.\n                actionsById[actionId] = liftedAction;\n                stagedActionIds = [...stagedActionIds, actionId];\n                // Optimization: we know that only the new action needs computing.\n                minInvalidatedStateIndex = stagedActionIds.length - 1;\n                break;\n            }\n            case IMPORT_STATE: {\n                // Completely replace everything.\n                ({\n                    monitorState,\n                    actionsById,\n                    nextActionId,\n                    stagedActionIds,\n                    skippedActionIds,\n                    committedState,\n                    currentStateIndex,\n                    computedStates,\n                    isLocked,\n                    isPaused,\n                } = liftedAction.nextLiftedState);\n                break;\n            }\n            case INIT: {\n                // Always recompute states on hot reload and init.\n                minInvalidatedStateIndex = 0;\n                if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                    // States must be recomputed before committing excess.\n                    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    commitExcessActions(stagedActionIds.length - options.maxAge);\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            case UPDATE: {\n                const stateHasErrors = computedStates.filter((state) => state.error).length > 0;\n                if (stateHasErrors) {\n                    // Recompute all states\n                    minInvalidatedStateIndex = 0;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        // States must be recomputed before committing excess.\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                        // Avoid double computation.\n                        minInvalidatedStateIndex = Infinity;\n                    }\n                }\n                else {\n                    // If not paused/locked, add a new action to signal devtools-user\n                    // that there was a reducer update.\n                    if (!isPaused && !isLocked) {\n                        if (currentStateIndex === stagedActionIds.length - 1) {\n                            currentStateIndex++;\n                        }\n                        // Add a new action to only recompute state\n                        const actionId = nextActionId++;\n                        actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n                        stagedActionIds = [...stagedActionIds, actionId];\n                        minInvalidatedStateIndex = stagedActionIds.length - 1;\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    }\n                    // Recompute state history with latest reducer and update action\n                    computedStates = computedStates.map((cmp) => (Object.assign(Object.assign({}, cmp), { state: reducer(cmp.state, RECOMPUTE_ACTION) })));\n                    currentStateIndex = stagedActionIds.length - 1;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                    }\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            default: {\n                // If the action is not recognized, it's a monitor action.\n                // Optimization: a monitor action can't change history.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n        }\n        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n        monitorState = monitorReducer(monitorState, liftedAction);\n        return {\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused,\n        };\n    };\n}\n\nclass StoreDevtools {\n    constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n        const liftedInitialState = liftInitialState(initialState, config.monitor);\n        const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n        const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n        const liftedReducer$ = reducers$.pipe(map(liftReducer));\n        const liftedStateSubject = new ReplaySubject(1);\n        const liftedStateSubscription = liftedAction$\n            .pipe(withLatestFrom(liftedReducer$), scan(({ state: liftedState }, [action, reducer]) => {\n            let reducedLiftedState = reducer(liftedState, action);\n            // On full state update\n            // If we have actions filters, we must filter completely our lifted state to be sync with the extension\n            if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n                reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);\n            }\n            // Extension should be sent the sanitized lifted state\n            extension.notify(action, reducedLiftedState);\n            return { state: reducedLiftedState, action };\n        }, { state: liftedInitialState, action: null }))\n            .subscribe(({ state, action }) => {\n            liftedStateSubject.next(state);\n            if (action.type === PERFORM_ACTION) {\n                const unliftedAction = action.action;\n                scannedActions.next(unliftedAction);\n            }\n        });\n        const extensionStartSubscription = extension.start$.subscribe(() => {\n            this.refresh();\n        });\n        const liftedState$ = liftedStateSubject.asObservable();\n        const state$ = liftedState$.pipe(map(unliftState));\n        this.extensionStartSubscription = extensionStartSubscription;\n        this.stateSubscription = liftedStateSubscription;\n        this.dispatcher = dispatcher;\n        this.liftedState = liftedState$;\n        this.state = state$;\n    }\n    dispatch(action) {\n        this.dispatcher.next(action);\n    }\n    next(action) {\n        this.dispatcher.next(action);\n    }\n    error(error) { }\n    complete() { }\n    performAction(action) {\n        this.dispatch(new PerformAction(action, +Date.now()));\n    }\n    refresh() {\n        this.dispatch(new Refresh());\n    }\n    reset() {\n        this.dispatch(new Reset(+Date.now()));\n    }\n    rollback() {\n        this.dispatch(new Rollback(+Date.now()));\n    }\n    commit() {\n        this.dispatch(new Commit(+Date.now()));\n    }\n    sweep() {\n        this.dispatch(new Sweep());\n    }\n    toggleAction(id) {\n        this.dispatch(new ToggleAction(id));\n    }\n    jumpToAction(actionId) {\n        this.dispatch(new JumpToAction(actionId));\n    }\n    jumpToState(index) {\n        this.dispatch(new JumpToState(index));\n    }\n    importState(nextLiftedState) {\n        this.dispatch(new ImportState(nextLiftedState));\n    }\n    lockChanges(status) {\n        this.dispatch(new LockChanges(status));\n    }\n    pauseRecording(status) {\n        this.dispatch(new PauseRecording(status));\n    }\n}\nStoreDevtools.ɵfac = function StoreDevtools_Factory(t) { return new (t || StoreDevtools)(ɵngcc0.ɵɵinject(DevtoolsDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ActionsSubject), ɵngcc0.ɵɵinject(ɵngcc1.ReducerObservable), ɵngcc0.ɵɵinject(DevtoolsExtension), ɵngcc0.ɵɵinject(ɵngcc1.ScannedActionsSubject), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler), ɵngcc0.ɵɵinject(INITIAL_STATE), ɵngcc0.ɵɵinject(STORE_DEVTOOLS_CONFIG)); };\nStoreDevtools.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: StoreDevtools, factory: StoreDevtools.ɵfac });\n/** @nocollapse */\nStoreDevtools.ctorParameters = () => [\n    { type: DevtoolsDispatcher },\n    { type: ActionsSubject },\n    { type: ReducerObservable },\n    { type: DevtoolsExtension },\n    { type: ScannedActionsSubject },\n    { type: ErrorHandler },\n    { type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE,] }] },\n    { type: StoreDevtoolsConfig, decorators: [{ type: Inject, args: [STORE_DEVTOOLS_CONFIG,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtools, [{\n        type: Injectable\n    }], function () { return [{ type: DevtoolsDispatcher }, { type: ɵngcc1.ActionsSubject }, { type: ɵngcc1.ReducerObservable }, { type: DevtoolsExtension }, { type: ɵngcc1.ScannedActionsSubject }, { type: ɵngcc0.ErrorHandler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [INITIAL_STATE]\n            }] }, { type: StoreDevtoolsConfig, decorators: [{\n                type: Inject,\n                args: [STORE_DEVTOOLS_CONFIG]\n            }] }]; }, null); })();\n\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('@ngrx/store-devtools Is Devtools Extension or Monitor Present');\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n    return Boolean(extension) || config.monitor !== noMonitor;\n}\nfunction createReduxDevtoolsExtension() {\n    const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n    if (typeof window === 'object' &&\n        typeof window[extensionKey] !== 'undefined') {\n        return window[extensionKey];\n    }\n    else {\n        return null;\n    }\n}\nfunction createStateObservable(devtools) {\n    return devtools.state;\n}\nclass StoreDevtoolsModule {\n    static instrument(options = {}) {\n        return {\n            ngModule: StoreDevtoolsModule,\n            providers: [\n                DevtoolsExtension,\n                DevtoolsDispatcher,\n                StoreDevtools,\n                {\n                    provide: INITIAL_OPTIONS,\n                    useValue: options,\n                },\n                {\n                    provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n                    deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n                    useFactory: createIsExtensionOrMonitorPresent,\n                },\n                {\n                    provide: REDUX_DEVTOOLS_EXTENSION,\n                    useFactory: createReduxDevtoolsExtension,\n                },\n                {\n                    provide: STORE_DEVTOOLS_CONFIG,\n                    deps: [INITIAL_OPTIONS],\n                    useFactory: createConfig,\n                },\n                {\n                    provide: StateObservable,\n                    deps: [StoreDevtools],\n                    useFactory: createStateObservable,\n                },\n                {\n                    provide: ReducerManagerDispatcher,\n                    useExisting: DevtoolsDispatcher,\n                },\n            ],\n        };\n    }\n}\nStoreDevtoolsModule.ɵfac = function StoreDevtoolsModule_Factory(t) { return new (t || StoreDevtoolsModule)(); };\nStoreDevtoolsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: StoreDevtoolsModule });\nStoreDevtoolsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(StoreDevtoolsModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_OPTIONS, RECOMPUTE, StoreDevtools, StoreDevtoolsConfig, StoreDevtoolsModule, IS_EXTENSION_OR_MONITOR_PRESENT as ɵa, createIsExtensionOrMonitorPresent as ɵb, createReduxDevtoolsExtension as ɵc, createStateObservable as ɵd, STORE_DEVTOOLS_CONFIG as ɵe, noMonitor as ɵf, createConfig as ɵg, REDUX_DEVTOOLS_EXTENSION as ɵh, DevtoolsExtension as ɵi, DevtoolsDispatcher as ɵj };\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}